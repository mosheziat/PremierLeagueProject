import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier
from sklearn.linear_model import LogisticRegression


svm_classifier = SVC(C=100, # penalty parameter, setting it to a larger value
                 kernel='rbf', # kernel type, rbf working fine here
                 degree=3, # default value, not tuned yet
                 gamma=1.5, # kernel coefficient, not tuned yet
                 coef0=1, # change to 1 from default value of 0.0
                 shrinking=True, # using shrinking heuristics
                 tol=0.001, # stopping criterion tolerance
                 probability=False, # no need to enable probability estimates
                 cache_size=200, # 200 MB cache size
                 class_weight=None, # all classes are treated equally
                 verbose=False, # print the logs
                 max_iter=-1, # no limit, let it run
                 decision_function_shape=None, # will use one vs rest explicitly
                 random_state=None)

input = pd.read_csv("GoalsData.csv")
lb = LabelEncoder()
y = input["Over"]
x = input.iloc[:,0:32]

def run_rf_experiment(features, labels):
    results = []
    for i in range(10):
        print(i)
        x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=i)
        clf = RandomForestClassifier(max_depth=4, n_estimators=500)
        clf.fit(x_train, y_train)
        y_pred = clf.predict(x_test)
        result = accuracy_score(y_test, y_pred)
        results.append(result)
    print(sum(results) / len(results), np.std(results))


def run_lr_experiment(features, labels):
    results = []
    for i in range(10):
        print(i)
        x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=i)
        clf = LogisticRegression()
        clf.fit(x_train, y_train)
        y_pred = clf.predict(x_test)
        result = accuracy_score(y_test, y_pred)
        results.append(result)
    print(sum(results) / len(results), np.std(results))


def run_svm_experiment(features, labels):
    results = []
    for i in range(10):
        print(i)
        x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=i)
        clf = OneVsRestClassifier(svm_classifier)
        clf.fit(x_train, y_train)
        y_pred = clf.predict(x_test)
        result = accuracy_score(y_test, y_pred)
        results.append(result)
    print(sum(results) / len(results), np.std(results))


run_rf_experiment(x, y)